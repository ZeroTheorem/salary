package main

import (
	"fmt"
	"github.com/leekchan/accounting"
	tele "gopkg.in/telebot.v4"
	"log"
	"strconv"
	"time"
)

var (
	totalMsg = `
ü•≥

<b>–†–∞–±–æ—Ç–∞</b>

–í—Å–µ–≥–æ: <b>%v</b>
–ü—Ä–µ–º–∏—è: <b>%v</b>
–ê–≤–∞–Ω—Å: <b>%v</b>
–ó–∞—Ä–ø–ª–∞—Ç–∞: <b>%v</b>

<b>–í–∫–ª–∞–¥—ã</b>

–í—Å–µ–≥–æ: <b>%v</b>

-------------------

–ò—Ç–æ–≥–æ: <b>%v</b>
`
	configMsg = `
–°—Ç–∞–≤–∫–∞ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü: %v
–°—Ç–∞–≤–∫–∞ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü: %v
–ö–æ–ª-–≤–æ —Å–º–µ–Ω –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü: %v
–ö–æ–ª-–≤–æ —Å–º–µ–Ω –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü: %v
–ü—Ä–µ–º–∏—è: %v%%
–ü—Ä–µ–º–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞: %v
–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç: %v
`
	option string
)

type config struct {
	currentPerHour      float64
	previousPerHour     float64
	currentCountShifts  float64
	previousCountShifts float64
	bonusPercent        float64
	coachBonus          float64
	internetBonus       float64
	depositPercent      float64
}

func main() {
	//-----------Initial bot--------------------
	pref := tele.Settings{
		Token:     "8095045960:AAHihLPiP0-ynJKVus-EMTh5eOQVdGQlwmg",
		Poller:    &tele.LongPoller{Timeout: 10 * time.Second},
		ParseMode: tele.ModeHTML,
	}
	b, err := tele.NewBot(pref)
	if err != nil {
		log.Fatal(err)
		return
	}

	//-----------Create main menu---------------
	mainMenu := &tele.ReplyMarkup{}
	settingsBtn := mainMenu.Data("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings")
	calculateBtn := mainMenu.Data("–†–∞—Å—á–∏—Ç–∞—Ç—å", "calculate")
	mainMenu.Inline(
		mainMenu.Row(calculateBtn),
		mainMenu.Row(settingsBtn),
	)

	//-----------Create settings menu------------
	settingsMenu := &tele.ReplyMarkup{}
	currentPerHourBtn := settingsMenu.Data("–°—Ç–∞–≤–∫–∞ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü", "currentPerHour")
	previousPerHourBtn := settingsMenu.Data("C—Ç–∞–≤–∫–∞ –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü", "previousPerHour")
	currentCountShiftsBtn := settingsMenu.Data("–ö–æ–ª-–≤–æ —Å–º–µ–Ω –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü", "currentCountShifts")
	previousCountShiftsBtn := settingsMenu.Data("–ö–æ–ª-–≤–æ —Å–º–µ–Ω –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü", "previousCountShifts")
	bonusPercentBtn := settingsMenu.Data("–ü—Ä–µ–º–∏—è", "bonusPercent")
	coachBonusBtn := settingsMenu.Data("–ü—Ä–µ–º–∏—è –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞", "coachBonus")
	internetBonusBtn := settingsMenu.Data("–ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –∑–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç", "internetBonus")
	depositPercentBtn := settingsMenu.Data("–ü—Ä–æ—Ü–µ–Ω—Ç—ã –ø–æ –≤–∫–ª–∞–¥—É", "depositPercent")
	previousBtn := settingsMenu.Data("–ù–∞–∑–∞–¥", "previous")
	settingsMenu.Inline(
		settingsMenu.Row(currentPerHourBtn),
		settingsMenu.Row(previousPerHourBtn),
		settingsMenu.Row(currentCountShiftsBtn),
		settingsMenu.Row(previousCountShiftsBtn),
		settingsMenu.Row(bonusPercentBtn),
		settingsMenu.Row(coachBonusBtn),
		settingsMenu.Row(internetBonusBtn),
		settingsMenu.Row(previousBtn),
		settingsMenu.Row(depositPercentBtn),
	)

	//-----------Initial config------------------
	cfg := &config{}

	//-----------Initial formater----------------
	ac := &accounting.Accounting{
		Symbol:    "‚ÇΩ",
		Precision: 2,
		Thousand:  " ",
		Decimal:   ".",
	}

	//-----------Create handlres-----------------
	b.Handle("/start", func(c tele.Context) error {
		return c.Send(createConfigMsg(cfg), mainMenu)
	})
	b.Handle(&calculateBtn, func(c tele.Context) error {
		return c.Send(calculateSalary(cfg, ac))
	})
	b.Handle(&previousBtn, func(c tele.Context) error {
		return c.Send(createConfigMsg(cfg), mainMenu)
	})
	b.Handle(&settingsBtn, func(c tele.Context) error {
		return c.Send("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", settingsMenu)
	})
	b.Handle(&currentPerHourBtn, func(c tele.Context) error {
		option = c.Callback().Unique
		return c.Send("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
	})
	b.Handle(&previousPerHourBtn, func(c tele.Context) error {
		option = c.Callback().Unique
		return c.Send("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
	})
	b.Handle(&currentCountShiftsBtn, func(c tele.Context) error {
		option = c.Callback().Unique
		return c.Send("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
	})
	b.Handle(&previousCountShiftsBtn, func(c tele.Context) error {
		option = c.Callback().Unique
		return c.Send("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
	})
	b.Handle(&bonusPercentBtn, func(c tele.Context) error {
		option = c.Callback().Unique
		return c.Send("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
	})
	b.Handle(&coachBonusBtn, func(c tele.Context) error {
		option = c.Callback().Unique
		return c.Send("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
	})
	b.Handle(&internetBonusBtn, func(c tele.Context) error {
		option = c.Callback().Unique
		return c.Send("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
	})
	b.Handle(&depositPercentBtn, func(c tele.Context) error {
		option = c.Callback().Unique
		return c.Send("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
	})
	b.Handle(tele.OnText, func(c tele.Context) error {
		val := c.Message().Text
		ival, err := strconv.ParseFloat(val, 64)

		if err != nil {
			return c.Send("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
		}

		switch option {
		case "currentPerHour":
			cfg.currentPerHour = ival
			option = ""
			return c.Send(createConfigMsg(cfg), settingsMenu)
		case "previousPerHour":
			cfg.previousPerHour = ival
			option = ""
			return c.Send(createConfigMsg(cfg), settingsMenu)
		case "currentCountShifts":
			cfg.currentCountShifts = ival
			option = ""
			return c.Send(createConfigMsg(cfg), settingsMenu)
		case "previousCountShifts":
			cfg.previousCountShifts = ival
			option = ""
			return c.Send(createConfigMsg(cfg), settingsMenu)
		case "bonusPercent":
			cfg.bonusPercent = ival
			option = ""
			return c.Send(createConfigMsg(cfg), settingsMenu)
		case "coachBonus":
			cfg.coachBonus = ival
			option = ""
			return c.Send(createConfigMsg(cfg), settingsMenu)
		case "internetBonus":
			cfg.internetBonus = ival
			option = ""
			return c.Send(createConfigMsg(cfg), settingsMenu)
		case "depositPercent":
			cfg.depositPercent = ival
			option = ""
			return c.Send(createConfigMsg(cfg), settingsMenu)

		default:
			return c.Send("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø–∏—Ü–∏—é", settingsMenu)
		}

	})

	//-----------Start bot-----------------------
	b.Start()

}

func calculateSalary(cfg *config, ac *accounting.Accounting) string {
	currentMonth := cfg.currentPerHour * 11 * cfg.currentCountShifts
	previousMonth := cfg.previousPerHour * 11 * cfg.previousCountShifts
	currentMonthWithTax := currentMonth - (currentMonth*13)/100
	previousMonthWithTax := previousMonth - (previousMonth*13)/100
	bonus := previousMonthWithTax*cfg.bonusPercent/100 + cfg.coachBonus
	salary := previousMonthWithTax*60/100 + cfg.internetBonus
	avance := currentMonthWithTax * 40 / 100
	totalsalary := salary + avance + bonus
	total := totalsalary + cfg.depositPercent
	msg := fmt.Sprintf(
		totalMsg,
		ac.FormatMoney(totalsalary),
		ac.FormatMoney(bonus),
		ac.FormatMoney(avance),
		ac.FormatMoney(salary),
		ac.FormatMoney(cfg.depositPercent),
		ac.FormatMoney(total),
	)
	return msg
}

func createConfigMsg(cfg *config) string {
	return fmt.Sprintf(configMsg,
		cfg.currentPerHour,
		cfg.previousPerHour,
		cfg.currentCountShifts,
		cfg.previousCountShifts,
		cfg.bonusPercent,
		cfg.coachBonus,
		cfg.internetBonus)
}
